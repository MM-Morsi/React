on scrimba 
8 projects on react 
____________________________________
spaced learning and repetition 
* re-watch 
* take breaks 
* 
____________________________________
redo things on your own here :D 
use scrimba 
____________________________________
react: imperative vs declarative programming 
____________________________________
Figma draft 
____________________________________
React as CDN 
* https://reactjs.org/docs/cdn-links.html
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

* pull babel 
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
compile down to js 
____________________________________
ReactDOM.render()
* declarative code 
* arguments
    * element 
        * <h1> hello </h1>
    * container --> normally  div#root in the index.html
        * document.getElementById("root")
        * document.querySelector("#root")
____________________________________
You are using the in-browser Babel transformer. Be sure to precompile your scripts for production - https://babeljs.io/docs/setup/
* for using react the easy way :D with cdn
____________________________________
Why React ? 
* composable 
    -- use small pieces to create a larger project 
    -- custom components that lead to readable html and code 
____________________________________
className instead of class in react jsx 
____________________________________
self closing tags for components 
* <ComponentName />
____________________________________
Declarative vs Imperative
--------------------------- 
* tell what to be done vs how to do instead

IMPERATIVE EXAMPLE: vanilla js code
------------------ 
const h1 = document.createElement("h1")
h1.textContent = "This is an imperative way to program"
h1.className = "header"
document.getElementById("root").append(h1)
// let text = document.createTextNode("Hello there"); // h1.appendChild(text); // h1.classList.add("header") // let root = document.getElementById("root"); // root.appendChild(h1);
* tell js how to do it 

DECLARATIVE EXAMPLE: react 
-------------------
ReactDOM.render(<h1 className="header">Hello, React!</h1>, document.getElementById("root"))
* tell react what to do 
____________________________________
JSX 
* javascript xml 
* html flavor of javascript
Differences
* className for example 
* JSX and regular dom
    * jsx returns a js object 
    * js dom createElement returns h1 tag 

EXAMPLE
const element = <h1 className="header">This is JSX</h1>
console.log(element)

/*
{
    type: "h1", 
    key: null, 
    ref: null, 
    props: {
        className: "header", 
        children: "This is JSX"
    }, 
    _owner: null, 
    _store: {}
}
 */

 NOTICE: PROPS + CHILDREN 
____________________________________
you must return 1 element --> multipl children 3ady 

const page = (
    <div>
        <h1 className="header">This is JSX</h1>
        <p>This is a paragraph</p>
    </div>
) // WORKS ALSO WITHOUT ()
console.log(element)
OUTPUT
------
{
    type: "div", 
    key: null, 
    ref: null, 
    props: {
        children: [
            {type: "h1", key: null, ref: null, props: {className: "header", children: "This is JSX"}, _owner: null, _store: {}}, 
            {type: "p", key: null, ref: null, props: {children: "This is a paragraph"}, _owner: null, _store: {}}
            ]}, 
    _owner: null, 
    _store: {}
}